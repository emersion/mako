#!/bin/sh -eu

usage() {
	echo "Usage: makoctl <command> [options...]"
	echo ""
	echo "Commands:"
	echo "  dismiss [id]                   Dismiss the notification with the"
	echo "                                 given id, or the last notification"
	echo "                                 if none is given"
	echo "          [-a|--all]             Dismiss all notifications"
	echo "          [-g|--group]           Dismiss all the notifications"
	echo "                                 in the last notification's group"
	echo "  restore                        Restore the most recently expired"
	echo "                                 notification from the history buffer"
	echo "  invoke [-n id] [action]        Invoke an action on the notification"
	echo "                                 with the given id, or the last"
	echo "                                 notification if none is given"
	echo "  menu [-n id] [prog] [arg ...]  Use [prog] [args ...] to select one"
	echo "                                 action to be invoked on the notification"
	echo "                                 with the given id, or the last"
	echo "                                 notification if none is given"
	echo "  list                           List notifications"
	echo "  reload                         Reload the configuration file"
	echo "  set <key>=<value>              Set a global configuration option"
	echo "  help                           Show this help"
}

call() {
	busctl -j --user call org.freedesktop.Notifications /fr/emersion/Mako \
		fr.emersion.Mako -- "$@"
}

if [ $# -eq 0 ]; then
   usage
   exit 1
fi

case "$1" in
"dismiss")
	[ $# -lt 2 ] && arg="0" || arg=$2
	case "$arg" in
	"-a"|"--all")
		call DismissAllNotifications
		;;
	"-g"|"--group")
		call DismissGroupNotifications
		;;
	*)
		re='^[0-9]+$'
		if ! [[ $arg =~ $re ]] ; then
			echo "makoctl: Unrecognized ID: '$arg'"
			exit 1
		fi
		call DismissNotification "u" "$arg"
		;;
	esac
	;;
"invoke")
	id=0
	if [ $# -gt 1 ] && [ "$2" = "-n" ]; then
		id="$3"
		shift 2
	fi

	action="default"
	if [ $# -gt 1 ]; then
		action="$2"
	fi

	call InvokeAction "us" "$id" "$action"
	;;
"restore")
	call RestoreNotification
	;;
"menu")
	shift 1
	if ! type jq > /dev/null; then
		echo >&2 "$0: jq is required to use 'menu'"
		exit 1
	fi
	if [ $# -gt 1 ] && [ "$1" = "-n" ]; then
		id=$2
		actions="$(call ListNotifications | id=$id jq --arg id $id -re '.data[0][] | select(.id.data==($id | tonumber)) | .actions.data')"
		shift 2
	else
		actions="$(call ListNotifications | jq -re '.data[0][0].actions.data')"
		id="0"
		echo $id
	fi
	if [ "$(jq -rn "$actions | length")" -eq "0" ]; then
		echo >&2 "$0: No actions found"
		exit 1
	fi

	sel="$(jq -rn "$actions|values[]" | "$@")"
	sel="$(jq -rn --arg sel "$sel" "$actions|to_entries[]|select(.value == \$sel).key")"
	if [ -z "$sel" ]; then
		echo >&2 "$0: No action selected"
		exit 1
	else
		call InvokeAction "us" "$id" "$sel"
	fi
	;;
"list")
	call ListNotifications
	;;
"reload")
	call Reload
	;;
"set")
	if [ $# -lt 2 ]; then
		echo >&2 "makoctl: missing argument for 'set'"
		exit 1
	fi
	name="${2%%'='*}"
	value="${2#*'='}"
	if [ "$2" = "$name" ]; then
		echo >&2 "makoctl: missing '=' in argument for 'set'"
		exit 1
	fi
	call SetConfigOption "ss" "$name" "$value"
	;;
"help"|"--help"|"-h")
	usage
	;;
*)
	echo "makoctl: unrecognized command '$1'"
	exit 1
	;;
esac
